#!/usr/bin/env bash

JOT_HOME=${JOT_HOME:-$HOME/jot/}
JOT_HOOKS=${JOT_HOOKS:-$JOT_HOME/hooks/}
JOT_EDITOR=${JOT_EDITOR:-$EDITOR}
JOT_COPY=${JOT_COPY:-xclip}
JOT_DATE_FMT=${JOT_DATE_FMT:-%a, %d %b %Y}
JOT_EXT=${JOT_EXT:-txt}

DATE_FILE_FMT='%Y-%m-%d'

# Drop trailing /
JOT_HOME=${JOT_HOME%/}
JOT_HOOKS=${JOT_HOOKS%/}

mkdir_home() {
  mkdir -p "$JOT_HOME"
}

prev_workday() {
  day_of_week=$(date -d today +%w)

  if [[ $day_of_week == "0" ]]; then
    days_offset=2
  elif [[ $day_of_week == "1" ]]; then
    days_offset=3
  else
    days_offset=1
  fi

  date -d "today - $days_offset days" +"$DATE_FILE_FMT"
}

next_workday() {
  day_of_week=$(date -d today +%w)

  if [[ $day_of_week == "5" ]]; then
    days_offset=3
  elif [[ $day_of_week == "6" ]]; then
    days_offset=2
  else
    days_offset=1
  fi

  date -d "today + $days_offset days" +"$DATE_FILE_FMT"
}

parse_date() {
  case $1 in
    td|today|'')
      date +"$DATE_FILE_FMT"
      ;;
    yd|yesterday)
      date -d yesterday +"$DATE_FILE_FMT"
      ;;
    tm|tommorow)
      date -d tomorrow +"$DATE_FILE_FMT"
      ;;
    pwd)
      prev_workday
      ;;
    nwd)
      next_workday
      ;;
    all)
      echo '*'
      ;;
    *)
      date -d "$1" +"$DATE_FILE_FMT"
      ;;
  esac
}

file_from_date() {
  date=$(parse_date "$1")
  echo "$JOT_HOME/$date.$JOT_EXT"
}

hook() {
  local hook_path="$JOT_HOOKS/$1"

  [[ -x "$hook_path" ]] && sh -c "$hook_path"
}

usage() {
  cat <<-EOF
Usage: jot [<command> [<date>...]]

command:

  e[dit]  edit notes for one or more dates (default)
  c[opy]  copy notes for a date
  l[ist]  list notes
  help    print this text

date:

  td or today
  yd or yesterday
  tm or tomorrow
  pwd              previous working day
  nwd              next working day
  "3 days ago"
  "2 days"         2 days ahead
  2020-04-28       absolute date
  all              all dates

Any other command will be executed and passed any notes after --

For example:

  jot rm -v -- 2020-04-28

  jot cat -- yd td

  jot less -- tm

  jot ls -lh

  jot grep --color Jane -- all
EOF
}

execute() {
  hook 'pre-execute'

  local seen_separator=false
  local cmd=''
  local files=()

  for arg in "$@"; do
    if [[ $seen_separator == 'false' ]]; then
      if [[ "$arg" == '--' ]]; then
        seen_separator=true
      else
        cmd="$cmd$arg "
      fi
    else
      local file=$(file_from_date "$arg")
      files+=("$file")
    fi
  done

  local files_str="${files[@]}"

  if [[ -z "$files_str" ]]; then
    files_str=$(file_from_date td)
  fi

  sh -c "$cmd $files_str"

  [[ $? -eq 0 ]] && hook 'post-execute'
}

copy() {
  hook 'pre-copy'

  local file=$(file_from_date "$1")
  local lines=$(grep -v '^#' "$file" | wc -l)

  grep -v '^#' "$file" | $JOT_COPY

  if [[ $? -eq 0 ]]; then
    echo "Copied $lines line(s) to clipboard"

    hook 'post-copy'
  fi
}

edit() {
  hook 'pre-edit'

  local files=()

  if [[ $# -eq 0 ]]; then
    local file=$(file_from_date td)
    files=("$file")
  else
    for arg in "$@"; do
      local file=$(file_from_date "$arg")
      files+=("$file")
    done
  fi

  local files_str="${files[@]}"

  sh -c "$JOT_EDITOR $JOT_EDITOR_OPTS $files_str"

  [[ $? -eq 0 ]] && hook 'post-edit'
}

list() {
  hook 'pre-list'

  today_date=$(date +"$JOT_DATE_FMT")

  for file in "$JOT_HOME"/*.$JOT_EXT; do
    file_date=$(basename "$file" .$JOT_EXT)
    date=$(date -d "$file_date" +"$JOT_DATE_FMT" | tr -d '\n')
    lines=$(wc -l "$file" | cut -d ' ' -f 1)

    if [[ "$date" == "$today_date" ]]; then
      echo -n '> '
    else
      echo -n '  '
    fi

    echo -n "$date"
    printf ' (%2d) ' $lines
    echo "$file"
  done

  hook 'post-list'
}

case $1 in
  e|edit|'')
    mkdir_home
    shift
    edit "$@"
    exit
    ;;
  c|copy)
    date=$(parse_date "$2")
    copy "$date"
    exit
    ;;
  l|list)
    mkdir_home
    list
    exit
    ;;
  help|-h|--help)
    usage
    exit
    ;;
  *)
    mkdir_home
    execute "$@"
    exit
    ;;
esac
